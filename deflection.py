# -*- coding: utf-8 -*-
"""Mechanics_of_Solids.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-jA97HsoWEoZRtwiJuzsbCPx2tK7MCvn

### **Comparison of Deflected shapes using both Theories**
"""

# Comparison Euler vs Elastica
import numpy as np
import matplotlib.pyplot as plt
from scipy.integrate import solve_ivp

## Deflected Shape using Euler-Bernoulli.

def deflection_euler_bernoulli(load_force, beam_length):
    EI = 1
    load_position = beam_length
    x = np.linspace(0, beam_length, 100)
    deflection = np.zeros_like(x)
    for i, xi in enumerate(x):
      deflection[i] = (load_force * xi**2) / (6 * EI) * (3 * load_position - xi)
    return x, deflection
beam_length = 0.80
load_force =-0.61803
x_beam, deflection_beam = deflection_euler_bernoulli(load_force, beam_length)


## Deflected Shape using Theory of Elastica.
P = -0.61803
alpha = -np.pi / 2

def equations(s, vars):
    x, y, theta = vars
    dxds = np.cos(theta)
    dyds = np.sin(theta)
    d2thetads2 = -P * (np.sin(theta + alpha))
    return [dxds, dyds, d2thetads2]

initial_conditions = [0, 0, 0]
s_values = np.linspace(0, beam_length, 100)
solution = solve_ivp(equations, [0, beam_length], initial_conditions, t_eval=s_values)

xSol = solution.y[0]
ySol = solution.y[1]
thetaSol = solution.y[2]

## Plotting results.
plt.figure(figsize=(8, 6))

plt.plot(x_beam, deflection_beam, label='Cantilever Beam (Euler-Bernoulli)', color='red',linestyle='--')
plt.plot(xSol, ySol, label='Elastica Curve', color='blue',linestyle='--')

plt.xlabel('Distance along the beam (m)')
plt.ylabel('Deflection / y (m)')
plt.title('Comparison: Cantilever Beam (Euler-Bernoulli) vs. Elastica Curve')

plt.axhline(0, color='black', linestyle='--', linewidth=0.8)
plt.axvline(0, color='gray', linestyle='--', linewidth=0.8)

## We can modify scale as per requirement.
plt.xlim(0,0.80)
plt.ylim(-0.80,0)

plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()

"""### **Computing Curvature**"""

# Code for calculating d(phi)/ds
import numpy as np
from scipy.integrate import solve_ivp
import matplotlib.pyplot as plt

P = -3
alpha = -np.pi / 2

## Computing Curvature
def equations(s, vars):
    x, y, theta = vars
    dxds = np.cos(theta)
    dyds = np.sin(theta)
    d2thetads2 = -P * np.sin(theta + alpha)
    return [dxds, dyds, d2thetads2]

initial_conditions = [0, 0, 0]
L=1
s_values = np.linspace(0, L, 100)
solution = solve_ivp(equations, [0, L], initial_conditions, t_eval=s_values)

xSol = solution.y[0]
ySol = solution.y[1]
thetaSol = solution.y[2]

theta_prime = np.gradient(thetaSol, s_values)

theta_prime_end = theta_prime[-1]

## Plotting the results.
plt.plot(s_values, thetaSol)
plt.xlabel('s')
plt.ylabel('theta(s)')
plt.title('Theta as a Function of s')
plt.grid(True)
plt.show()

print("Theta prime at the end of the beam (s = 1):", theta_prime_end)

"""### **Experimetal Implementation in Code**





"""

# Code for Experiment
import numpy as np
import matplotlib.pyplot as plt


def create_cantilever_beam_plot():
    def cantilever_beam_deflection(length, load_position, load_force, beam_width, beam_height, youngs_modulus):

        I = (beam_width * beam_height ** 3) / 12
        x = np.linspace(0, length, 100)
        deflection = np.zeros_like(x)
        for i, xi in enumerate(x):
            if xi <= load_position:
                deflection[i] = (load_force * xi ** 2) / (6 * youngs_modulus * I) * (
                            -3 * load_position + xi)
            else:
                deflection[i] = (load_force * load_position ** 2 * (load_position - 3 * xi)) / (
                            6 * youngs_modulus * I)

        return x, deflection


    length = 0.80 # in m
    beam_width = 0.024 # in m
    beam_height = 0.005 # in m
    youngs_modulus = 4*(10**9) # in N/m2
    load_position=0.80 # in m
    load_force = 0.61803 # in N
    fig, ax = plt.subplots()

    x, deflection = cantilever_beam_deflection(length, load_position,load_force, beam_width, beam_height, youngs_modulus)
    line, = ax.plot(x, deflection, color='r', linestyle='--', label='Deflected Shape')
    plt.xlabel('Distance along the beam (m)')
    plt.ylabel('Deflection (m)')
    plt.title('Deflected Shape of Cantilever Beam under Point Load (Euler-Bernoulli)')
    plt.axhline(0, color='black', linestyle='--', linewidth=0.8)
    plt.grid(True)
    plt.show()


create_cantilever_beam_plot()